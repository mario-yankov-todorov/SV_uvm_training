  The Design Under Test (DUT) is connected to a layer of transactors (drivers, monitors, responders). These
transactors communicate with the DUT at the pin level by driving and sampling DUT signals, and with the rest of
the UVM testbench by passing transaction objects. They convert data between pins and transactions, i.e. from/to
signal to/from transaction level. The testbench layer above the transactor layer consists of components that interact
exclusively at the transaction level, such as scoreboards, coverage collectors, stimulus generators, etc. All structural
elements in a UVM testbench are extended from the uvm_component base class.

  The lowest level of a UVM testbench is interface-specific. For each interface, the UVM provides a uvm_agent that
includes the driver, monitor, stimulus generator (sequencer) and (optionally) a coverage collector. The Agent thus
embodies all of the protocol-specific communication with the DUT. The Agent(s) and other design-specific
components are encapsulated in a uvm_env Environment component which is in turn instantiated and customize by
a top-level uvm_test component.

  The uvm_sequence_item – sometimes referred to as a transaction – is a uvm_object that contains the data fields
necessary to implement the protocol and communicate with the DUT. The uvm_driver is responsible for converting
the sequence_item(s) into “pin wiggles” on the signal-level interface to send and receive data to/from the DUT. The
sequence_items are provided by one or more uvm_sequence objects that define stimulus at the transaction level and
execute on the agent’s uvm_sequencer component. The sequencer is responsible for executing the sequences,
arbitrating between them and routing sequence items between the driver and the sequence.